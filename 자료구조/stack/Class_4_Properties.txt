
클래스의 4가지 특성에 대한 간단한 예제

1. 은닉화 (Encapsulation)
은닉화는 클래스의 멤버 변수나 멤버 함수를 외부에서 접근하지 못하도록 하여 데이터를 보호하는 것입니다. 기본적으로 클래스의 멤버는 private으로 설정됩니다.

예시:
#include <iostream>
using namespace std;

class Person {
private:
    int age; // 은닉된 멤버 변수

public:
    void setAge(int a) {
        if(a > 0) {
            age = a;
        }
    }

    int getAge() {
        return age;
    }
};

int main() {
    Person p;
    p.setAge(25); // public 멤버 함수를 통해 접근
    cout << "Age: " << p.getAge() << endl; // public 멤버 함수를 통해 접근
    return 0;
}

2. 캡슐화 (Encapsulation)
캡슐화는 관련 있는 데이터와 함수를 하나의 클래스 내에 묶어 제공하는 것입니다. 이를 통해 내부 구현을 숨기고 외부에는 필요한 인터페이스만 제공할 수 있습니다.

예시:
#include <iostream>
using namespace std;

class Car {
private:
    int speed;

public:
    void setSpeed(int s) {
        speed = s;
    }

    int getSpeed() {
        return speed;
    }

    void display() {
        cout << "Speed: " << speed << " km/h" << endl;
    }
};

int main() {
    Car myCar;
    myCar.setSpeed(120);
    myCar.display();
    return 0;
}

3. 상속성 (Inheritance)
상속성은 기존 클래스(기본 클래스 또는 부모 클래스)의 특성을 새로운 클래스(파생 클래스 또는 자식 클래스)에 물려주는 것입니다. 이를 통해 코드의 재사용성을 높일 수 있습니다.

예시:
#include <iostream>
using namespace std;

class Animal {
public:
    void eat() {
        cout << "This animal is eating." << endl;
    }
};

class Dog : public Animal {
public:
    void bark() {
        cout << "The dog is barking." << endl;
    }
};

int main() {
    Dog myDog;
    myDog.eat();  // 부모 클래스의 함수 호출
    myDog.bark(); // 자식 클래스의 함수 호출
    return 0;
}

4. 다형성 (Polymorphism)
다형성은 같은 인터페이스를 통해 서로 다른 동작을 수행할 수 있게 하는 것입니다. 주로 가상 함수(virtual function)를 통해 구현됩니다.

예시:
#include <iostream>
using namespace std;

class Shape {
public:
    virtual void draw() {
        cout << "Drawing a shape." << endl;
    }
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing a circle." << endl;
    }
};

class Square : public Shape {
public:
    void draw() override {
        cout << "Drawing a square." << endl;
    }
};

void render(Shape* shape) {
    shape->draw();
}

int main() {
    Circle circle;
    Square square;
    render(&circle);  // Circle의 draw 함수 호출
    render(&square);  // Square의 draw 함수 호출
    return 0;
}

위 예제들은 C++에서 클래스의 주요 특성을 간단하게 보여줍니다. 각각의 특성은 객체 지향 프로그래밍의 중요한 원칙을 구현하고, 소프트웨어의 재사용성, 유지보수성, 유연성을 향상시킵니다.
