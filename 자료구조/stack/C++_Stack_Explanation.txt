
C++ 스택(Stack)에 대하여

C++에서 스택(Stack)은 LIFO(Last-In, First-Out) 원칙을 따르는 데이터 구조입니다. 이는 마지막에 삽입된 데이터가 가장 먼저 삭제되는 구조입니다. 스택은 `<stack>` 헤더 파일에 정의되어 있으며, `std::stack` 클래스를 사용하여 구현할 수 있습니다.

스택의 주요 연산은 다음과 같습니다:
1. **push**: 스택의 맨 위에 원소를 추가합니다.
2. **pop**: 스택의 맨 위에 있는 원소를 제거합니다.
3. **top**: 스택의 맨 위에 있는 원소를 반환합니다.
4. **empty**: 스택이 비어 있는지 확인합니다.
5. **size**: 스택의 원소 개수를 반환합니다.

### 예제 코드

아래는 `std::stack`을 사용하여 스택의 기본 연산을 시연하는 간단한 예제 코드입니다.

```cpp
#include <iostream>
#include <stack>

using namespace std;

int main() {
    // 스택 선언
    stack<int> s;

    // 스택에 원소 추가 (push)
    s.push(10);
    s.push(20);
    s.push(30);

    // 스택의 크기 출력
    cout << "스택의 크기: " << s.size() << endl; // 출력: 스택의 크기: 3

    // 스택의 맨 위 원소 출력 (top)
    cout << "스택의 맨 위 원소: " << s.top() << endl; // 출력: 스택의 맨 위 원소: 30

    // 스택의 맨 위 원소 제거 (pop)
    s.pop();

    // 스택의 맨 위 원소 출력
    cout << "스택의 맨 위 원소: " << s.top() << endl; // 출력: 스택의 맨 위 원소: 20

    // 스택이 비어있는지 확인
    if (s.empty()) {
        cout << "스택이 비어있습니다." << endl;
    } else {
        cout << "스택이 비어있지 않습니다." << endl; // 출력: 스택이 비어있지 않습니다.
    }

    return 0;
}
```

### 스택의 주요 연산 설명

1. **스택 선언**
   ```cpp
   stack<int> s;
   ```
   - `std::stack` 클래스를 사용하여 정수형 스택 `s`를 선언합니다.

2. **원소 추가 (push)**
   ```cpp
   s.push(10);
   s.push(20);
   s.push(30);
   ```
   - `push` 메서드를 사용하여 스택에 원소를 추가합니다. 여기서는 10, 20, 30의 순서로 추가합니다.

3. **스택의 크기 확인 (size)**
   ```cpp
   cout << "스택의 크기: " << s.size() << endl;
   ```
   - `size` 메서드를 사용하여 스택의 원소 개수를 확인합니다. 현재 스택에는 3개의 원소가 있습니다.

4. **스택의 맨 위 원소 확인 (top)**
   ```cpp
   cout << "스택의 맨 위 원소: " << s.top() << endl;
   ```
   - `top` 메서드를 사용하여 스택의 맨 위에 있는 원소를 확인합니다. 현재 맨 위에는 30이 있습니다.

5. **스택의 맨 위 원소 제거 (pop)**
   ```cpp
   s.pop();
   ```
   - `pop` 메서드를 사용하여 스택의 맨 위 원소를 제거합니다. 이제 맨 위 원소는 20이 됩니다.

6. **스택이 비어있는지 확인 (empty)**
   ```cpp
   if (s.empty()) {
       cout << "스택이 비어있습니다." << endl;
   } else {
       cout << "스택이 비어있지 않습니다." << endl;
   }
   ```
   - `empty` 메서드를 사용하여 스택이 비어 있는지 확인합니다. 현재 스택에는 20과 10이 남아 있으므로 비어있지 않습니다.

### 스택의 내부 구현

`std::stack`은 기본적으로 `std::deque` 컨테이너를 사용하여 구현되지만, 필요에 따라 `std::vector`나 `std::list`와 같은 다른 컨테이너도 사용할 수 있습니다. 다음은 `std::deque` 대신 `std::vector`를 사용하는 예입니다:

```cpp
#include <iostream>
#include <stack>
#include <vector>

using namespace std;

int main() {
    // 벡터를 사용한 스택 선언
    stack<int, vector<int>> s;

    s.push(10);
    s.push(20);
    s.push(30);

    cout << "스택의 크기: " << s.size() << endl; // 출력: 스택의 크기: 3
    cout << "스택의 맨 위 원소: " << s.top() << endl; // 출력: 스택의 맨 위 원소: 30

    s.pop();
    cout << "스택의 맨 위 원소: " << s.top() << endl; // 출력: 스택의 맨 위 원소: 20

    return 0;
}
```

이처럼 `std::stack`은 다양한 컨테이너를 기반으로 유연하게 사용할 수 있습니다.
