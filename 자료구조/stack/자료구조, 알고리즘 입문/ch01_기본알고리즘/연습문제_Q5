int med3_1(int a, int b, int c){
  if(a>=b)
    if(b>=c)
      return b;
    else if(a<=c)
      return a;
    else
      return c;
  else if(a>c)
    return a;
  else if(b>c)
    return c;
  else
    return b;
}

int med3_2(int a, int b, int c){
  if((b>=a && c<=a) || (b<=a && c>=a))
    return a;
  else if((a>b && c<b) || (a<b && c>b))
    return b;
  return c;
}

/*
비교 및 효율 차이 분석

비교 연산 횟수:
med3_1은 중첩된 if-else 구조로 인해 비교 연산 횟수가 상대적으로 적습니다. 각 단계에서 필요하지 않은 비교를 피할 수 있습니다.
med3_2는 각 조건문이 복잡한 논리 연산을 포함하고 있어, 비교 연산이 많습니다. 예를 들어 (b >= a && c <= a)와 같은 조건문은 두 번의 비교를 필요로 합니다.
조건문의 복잡도:

med3_1은 각 조건이 비교적 단순하고, 단계적으로 중간값을 찾아가는 구조입니다.
med3_2는 각 조건이 복잡하고, 논리적 연산이 많아 코드의 이해와 실행에서 시간이 더 걸릴 수 있습니다.

최적화 가능성:
med3_1의 조건문들은 독립적이고 명확하게 나누어져 있어 최적화가 용이합니다.
med3_2는 조건문이 복잡하게 얽혀 있어 최적화가 어렵고, 실제 실행 시간도 더 길어질 수 있습니다.

따라서, med3_2 함수가 med3_1 함수에 비해 효율이 떨어지는 이유는 주로 더 많은 비교 연산과 복잡한 조건문 때문입니다. 이는 실제 실행 시 더 많은 CPU 자원을 사용하게 되고, 최적화가 어려워지는 결과를 초래합니다.
*/
